import { Directive, ElementRef, Input } from '@angular/core';
import { HelperService } from '../services/helper.service';
export class ColDirective {
    constructor(el, helper) {
        this.el = el;
        this.helper = helper;
        this.col = ''; //0-100%, fill
        this.colLg = '';
        this.colMd = '';
        this.colSm = '';
    }
    ngOnInit() {
        this.helper.applyStyle(this.el, 'overflow', 'auto');
        this.helper.applyStyle(this.el, 'boxSizing', 'border-box');
        //@ts-ignore
        this.observer = new ResizeObserver((entries) => {
            let width = entries[0].contentRect.width;
            this.apply(width);
        });
        //attach resize observer to body element
        let bodyEle = document.getElementsByTagName('body') ? document.getElementsByTagName('body')[0] : null;
        if (bodyEle && this.observer) {
            this.observer.observe(bodyEle);
        }
    }
    ngOnChanges(changes) {
        if (changes.col || changes.colLg || changes.colMd || changes.colSm) {
            window ? this.apply(window.innerWidth) : null;
        }
    }
    ngOnDestroy() {
        this.observer.unObserve(this.el.nativeElement);
    }
    apply(width) {
        let styleToApply = '';
        if (width <= 600 && this.colSm) {
            styleToApply = this.colSm ? this.colSm : this.colMd ? this.colMd : this.colLg ? this.colLg : this.col;
        }
        else if (width <= 959 && this.colSm) {
            styleToApply = this.colMd ? this.colMd : this.colLg ? this.colLg : this.col;
        }
        else {
            styleToApply = this.colLg ? this.colLg : this.col;
        }
        if (styleToApply) {
            if (styleToApply.toLocaleLowerCase() == 'fill') {
                this.helper.applyStyle(this.el, 'flex', '1 1 0');
            }
            else if (styleToApply.includes('%')) {
                this.helper.applyStyle(this.el, 'flex', `0 0 ${styleToApply}`);
            }
            else {
                console.warn("Invalid col val, should be b/w 0 amd 100% (with %) or fill");
                this.helper.applyStyle(this.el, 'flex', `0 0 auto`);
            }
        }
        else {
            this.helper.applyStyle(this.el, 'flex', `0 0 auto`);
        }
    }
}
ColDirective.decorators = [
    { type: Directive, args: [{
                selector: '[col],[col.lg],[col.md],[col.sm]'
            },] }
];
ColDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: HelperService }
];
ColDirective.propDecorators = {
    col: [{ type: Input, args: ['col',] }],
    colLg: [{ type: Input, args: ['col.lg',] }],
    colMd: [{ type: Input, args: ['col.md',] }],
    colSm: [{ type: Input, args: ['col.sm',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25ndy1jb3JlL3NyYy9saWIvbGF5b3V0cy9jb2wuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBZ0MsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBSzNELE1BQU0sT0FBTyxZQUFZO0lBU3ZCLFlBQW9CLEVBQWEsRUFBVSxNQUFvQjtRQUEzQyxPQUFFLEdBQUYsRUFBRSxDQUFXO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBYztRQVBqRCxRQUFHLEdBQUMsRUFBRSxDQUFDLENBQUMsY0FBYztRQUNuQixVQUFLLEdBQUMsRUFBRSxDQUFDO1FBQ1QsVUFBSyxHQUFDLEVBQUUsQ0FBQztRQUNULFVBQUssR0FBQyxFQUFFLENBQUM7SUFJeUMsQ0FBQztJQUVwRSxRQUFRO1FBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxVQUFVLEVBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxXQUFXLEVBQUMsWUFBWSxDQUFDLENBQUM7UUFFekQsWUFBWTtRQUNaLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxjQUFjLENBQUMsQ0FBQyxPQUFPLEVBQUMsRUFBRTtZQUM1QyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztZQUN6QyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBRUgsd0NBQXdDO1FBQ3hDLElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxv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QUFLO29CQUNYLEtBQUssU0FBQyxRQUFRO29CQUNkLEtBQUssU0FBQyxRQUFRO29CQUNkLEtBQUssU0FBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSGVscGVyU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2hlbHBlci5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NvbF0sW2NvbC5sZ10sW2NvbC5tZF0sW2NvbC5zbV0nXG59KVxuZXhwb3J0IGNsYXNzIENvbERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCxPbkRlc3Ryb3ksT25DaGFuZ2VzIHtcblxuICBASW5wdXQoJ2NvbCcpIGNvbD0nJzsgLy8wLTEwMCUsIGZpbGxcbiAgQElucHV0KCdjb2wubGcnKSBjb2xMZz0nJztcbiAgQElucHV0KCdjb2wubWQnKSBjb2xNZD0nJztcbiAgQElucHV0KCdjb2wuc20nKSBjb2xTbT0nJztcblxuICBvYnNlcnZlcjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOkVsZW1lbnRSZWYsIHByaXZhdGUgaGVscGVyOkhlbHBlclNlcnZpY2UpIHsgfVxuXG4gIG5nT25Jbml0KCl7XG4gICAgdGhpcy5oZWxwZXIuYXBwbHlTdHlsZSh0aGlzLmVsLCdvdmVyZmxvdycsJ2F1dG8nKTtcbiAgICB0aGlzLmhlbHBlci5hcHBseVN0eWxlKHRoaXMuZWwsJ2JveFNpemluZycsJ2JvcmRlci1ib3gnKTtcblxuICAgIC8vQHRzLWlnbm9yZVxuICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMpPT57XG4gICAgICBsZXQgd2lkdGggPSBlbnRyaWVzWzBdLmNvbnRlbnRSZWN0LndpZHRoO1xuICAgICAgdGhpcy5hcHBseSh3aWR0aCk7XG4gICAgfSk7XG5cbiAgICAvL2F0dGFjaCByZXNpemUgb2JzZXJ2ZXIgdG8gYm9keSBlbGVtZW50XG4gICAgbGV0IGJvZHlFbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpID8gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXSA6IG51bGw7XG4gICAgaWYoYm9keUVsZSAmJiB0aGlzLm9ic2VydmVyKXtcbiAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZShib2R5RWxlKTtcbiAgICB9XG5cbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6YW55KXtcbiAgICBpZihjaGFuZ2VzLmNvbCB8fCBjaGFuZ2VzLmNvbExnIHx8IGNoYW5nZXMuY29sTWQgfHwgY2hhbmdlcy5jb2xTbSl7XG4gICAgICB3aW5kb3cgPyB0aGlzLmFwcGx5KHdpbmRvdy5pbm5lcldpZHRoKSA6IG51bGw7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKXtcbiAgICB0aGlzLm9ic2VydmVyLnVuT2JzZXJ2ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICB9XG5cbiAgYXBwbHkod2lkdGg6bnVtYmVyKXtcbiAgICBsZXQgc3R5bGVUb0FwcGx5ID0gJyc7XG4gICAgaWYod2lkdGggPD0gNjAwICYmIHRoaXMuY29sU20pe1xuICAgICAgc3R5bGVUb0FwcGx5ID0gdGhpcy5jb2xTbSA/IHRoaXMuY29sU20gOiB0aGlzLmNvbE1kID8gdGhpcy5jb2xNZCA6IHRoaXMuY29sTGcgPyB0aGlzLmNvbExnIDogdGhpcy5jb2w7XG4gICAgfWVsc2UgaWYod2lkdGggPD0gOTU5ICYmIHRoaXMuY29sU20pe1xuICAgICAgc3R5bGVUb0FwcGx5ID0gdGhpcy5jb2xNZCA/IHRoaXMuY29sTWQgOiB0aGlzLmNvbExnID8gdGhpcy5jb2xMZyA6IHRoaXMuY29sO1xuICAgIH1lbHNle1xuICAgICAgc3R5bGVUb0FwcGx5ID0gIHRoaXMuY29sTGcgPyB0aGlzLmNvbExnIDogdGhpcy5jb2w7XG4gICAgfVxuXG4gICAgaWYoc3R5bGVUb0FwcGx5KXtcbiAgICAgIGlmKHN0eWxlVG9BcHBseS50b0xvY2FsZUxvd2VyQ2FzZSgpID09ICdmaWxsJyl7XG4gICAgICAgIHRoaXMuaGVscGVyLmFwcGx5U3R5bGUodGhpcy5lbCwnZmxleCcsJzEgMSAwJyk7XG4gICAgICB9ZWxzZSBpZihzdHlsZVRvQXBwbHkuaW5jbHVkZXMoJyUnKSl7XG4gICAgICAgIHRoaXMuaGVscGVyLmFwcGx5U3R5bGUodGhpcy5lbCwnZmxleCcsYDAgMCAke3N0eWxlVG9BcHBseX1gKTtcbiAgICAgIH1lbHNle1xuICAgICAgICBjb25zb2xlLndhcm4oXCJJbnZhbGlkIGNvbCB2YWwsIHNob3VsZCBiZSBiL3cgMCBhbWQgMTAwJSAod2l0aCAlKSBvciBmaWxsXCIpO1xuICAgICAgICB0aGlzLmhlbHBlci5hcHBseVN0eWxlKHRoaXMuZWwsJ2ZsZXgnLGAwIDAgYXV0b2ApO1xuICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgdGhpcy5oZWxwZXIuYXBwbHlTdHlsZSh0aGlzLmVsLCdmbGV4JyxgMCAwIGF1dG9gKTtcbiAgICB9XG5cbiAgfVxuXG59XG4iXX0=